#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// #include <interfaces/hid-trackball.dtsi>

&lt {
    tapping-term-ms = <150>;
    quick_tap_ms = <150>;
    quick-tap-ms = <170>;
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TUNED";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <125>;
            require-prior-idle-ms = <200>;
            hold-trigger-key-positions = <0 3 2 1 4 5 13 12 14 15 17 16 29 28 26 27 25 24>;
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&caps_word>;

            label = "LCTRL - CAPSWORD";
        };

        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp ENTER>, <&kp LC(LS(ENTER))>;

            label = "alt-enter-ctrlshenter";
        };

        td2: td2 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LG(C)>;

            label = "gui-copilot";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <125>;
            require-prior-idle-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 35 34 33 32 31 30>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <29 30>;
            require-prior-idle-ms = <75>;
        };

        gui-copilot {
            bindings = <&td2>;
            key-positions = <42 43 16 25>;
            require-prior-idle-ms = <75>;
        };

        ctrltab {
            bindings = <&kp LC(TAB)>;
            require-prior-idle-ms = <75>;
            key-positions = <2 1>;
        };

        ctrshtab {
            bindings = <&kp LC(LS(TAB))>;
            require-prior-idle-ms = <75>;
            key-positions = <1 2 3>;
        };

        left_monitor {
            bindings = <&kp LG(LS(LEFT))>;
            key-positions = <13 14 15>;
            require-prior-idle-ms = <75>;
        };

        right_monitor {
            bindings = <&kp LG(LS(RIGHT))>;
            key-positions = <16 17>;
            require-prior-idle-ms = <75>;
        };

        gui_up {
            bindings = <&kp LG(UP_ARROW)>;
            key-positions = <2 3>;
            require-prior-idle-ms = <75>;
        };

        gui_down {
            bindings = <&kp LG(DOWN)>;
            key-positions = <15 16>;
            require-prior-idle-ms = <75>;
        };

        gui_left {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <15 14>;
            require-prior-idle-ms = <75>;
        };

        gui_right {
            bindings = <&kp LG(RIGHT)>;
            key-positions = <17 16 15>;
            require-prior-idle-ms = <75>;
        };

        snipping_tool {
            bindings = <&kp LG(LS(S))>;
            key-positions = <16 1>;
            require-prior-idle-ms = <75>;
        };

        notifications {
            bindings = <&kp LG(N)>;
            key-positions = <16 12>;
            require-prior-idle-ms = <75>;
        };

        Markasread {
            bindings = <&kp LC(Q)>;
            key-positions = <4 16>;
            require-prior-idle-ms = <75>;
        };

        ALTF4 {
            bindings = <&kp LA(F4)>;
            key-positions = <2 16>;
            require-prior-idle-ms = <75>;
        };

        lock {
            bindings = <&kp LG(L)>;
            key-positions = <23 11>;
            require-prior-idle-ms = <75>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <11 10>;
        };

        lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <20 21>;
            layers = <0>;
        };

        rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 22>;
            layers = <0>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
        };

        ctrlshiftv {
            bindings = <&kp LC(LS(V))>;
            key-positions = <27 28 29>;
        };

        winv {
            bindings = <&kp LG(V)>;
            key-positions = <38 28>;
        };

        softoff {
            bindings = <&soft_off>;
            key-positions = <0 11>;
        };

        gui {
            bindings = <&kp RGUI>;
            key-positions = <37 38>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(F) &kp O &kp R &kp SPACE &kp LS(R) &kp LS(O) &kp SPACE &kp I &kp S &kp S &kp U &kp A &kp N &kp C &kp E &kp SPACE &kp P &kp L &kp E &kp A &kp S &kp E &kp COMMA &kp SPACE &kp K &kp I &kp N &kp D &kp L &kp Y &kp SPACE &kp R &kp E &kp F &kp E &kp R &kp SPACE &kp T &kp O &kp SPACE &kp T &kp H &kp E &kp SPACE &kp L &kp I &kp S &kp T &kp SPACE &kp O &kp F &kp SPACE &kp R &kp E &kp Q &kp U &kp I &kp R &kp E &kp D &kp SPACE &kp M &kp A &kp T &kp E &kp R &kp I &kp A &kp L &kp S &kp SPACE &kp P &kp R &kp O &kp V &kp I &kp D &kp E &kp D &kp SPACE &kp B &kp E &kp L &kp O &kp W &kp COMMA>;
            label = "ForRO";
        };

        new_macro14: new_macro14 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(S) &kp P &kp E &kp C &kp I &kp A &kp L>;
            label = "Special";
        };

        new_macro15: new_macro15 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(F) &kp O &kp R &kp SPACE &kp A &kp L &kp L &kp O &kp C &kp A &kp T &kp I &kp O &kp N &kp SPACE &kp O &kp F &kp SPACE &kp N &kp E &kp E &kp D &kp E &kp D &kp SPACE &kp M &kp A &kp T &kp E &kp R &kp I &kp A &kp L &kp S &kp SPACE &kp B &kp E &kp L &kp O &kp W &kp COMMA &kp SPACE &kp P &kp L &kp E &kp A &kp S &kp E &kp DOT>;
            label = "Matsallocation";
        };

        new_macro1: new_macro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(F) &kp O &kp R &kp SPACE &kp Y &kp O &kp U &kp R &kp SPACE &kp K &kp I &kp N &kp D &kp SPACE &kp A &kp S &kp S &kp I &kp S &kp T &kp A &kp N &kp C &kp E &kp COMMA &kp SPACE &kp P &kp L &kp E &kp A &kp S &kp E &kp DOT &kp SPACE &kp LS(W) &kp E &kp SPACE &kp H &kp E &kp R &kp E &kp B &kp Y &kp SPACE &kp E &kp N &kp D &kp O &kp R &kp S &kp E &kp SPACE &kp T &kp H &kp I &kp S &kp SPACE &kp P &kp R &kp O &kp J &kp E &kp C &kp T &kp SPACE &kp F &kp O &kp R &kp SPACE &kp LC(B) &kp E &kp N &kp D &kp MINUS &kp T &kp O &kp MINUS &kp E &kp N &kp D &kp SPACE &kp I &kp M &kp P &kp L &kp E &kp M &kp E &kp N &kp T &kp A &kp T &kp I &kp O &kp N &kp LC(B) &kp DOT &kp SPACE &kp LS(T) &kp H &kp A &kp N &kp K &kp SPACE &kp Y &kp O &kp U &kp DOT>;
            label = "NEW_MACRO1";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "base_layer";
            bindings = <
&kp ESCAPE           &kp Q  &kp W  &kp E                   &kp R        &kp T                  &kp Y                  &kp U                 &kp I             &kp O             &kp P     &kp BACKSPACE
&mt LCTRL TAB        &kp A  &kp S  &kp D                   &lt 2 F      &kp G                  &kp H                  &hml RIGHT_CONTROL J  &hml RIGHT_GUI K  &hml RIGHT_ALT L  &kp SEMI  &kp SQT
&mt LEFT_SHIFT CAPS  &kp Z  &kp X  &kp C                   &kp V        &kp B                  &kp N                  &kp M                 &kp COMMA         &kp DOT           &kp FSLH  &kp RIGHT_SHIFT
                                   &mt LEFT_ALT BACKSPACE  &lt 2 ENTER  &lt 1 SPACE            &mt RIGHT_SHIFT SPACE  &lt 3 BACKSPACE       &kp ENTER
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        NAV {
            bindings = <
&trans  &new_macro14  &kp HOME        &kp UP_ARROW     &kp END    &kp P             &kp PLUS        &mkp LCLK           &mmv MOVE_UP    &mkp RCLK            &kp N0     &kp MINUS
&trans  &trans        &kp LEFT        &kp DOWN         &kp RIGHT  &kp O             &msc SCRL_UP    &mmv MOVE_LEFT      &mmv MOVE_DOWN  &mmv MOVE_RIGHT      &kp EQUAL  &kp LBKT
&trans  &trans        &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans     &trans            &msc SCRL_DOWN  &kp LA(LEFT_ARROW)  &trans          &kp LA(RIGHT_ARROW)  &kp FSLH   &kp RBKT
                                      &trans           &trans     &trans            &trans          &trans              &trans
            >;

            sensor-bindings = <&rgb_encoder>;
            label = "nav_layer";
        };

        NUM_L {
            display-name = "num_left_layer";
            bindings = <
&kp COLON  &kp ASTERISK  &kp N7  &kp N8  &kp N9        &kp PLUS                        &kp K_MUTE             &kp C_PREVIOUS         &kp C_PLAY_PAUSE  &kp C_NEXT            &trans  &trans
&kp DOT    &kp SLASH     &kp N4  &kp N5  &kp N6        &kp MINUS                       &trans                 &kp RA(C_VOLUME_DOWN)  &trans            &kp RA(C_VOLUME_UP)   &trans  &trans
&trans     &kp NUMBER_0  &kp N1  &kp N2  &kp N3        &kp EQUAL                       &trans                 &kp C_BRIGHTNESS_DEC   &trans            &kp C_BRIGHTNESS_INC  &trans  &trans
                                 &mo 4   &lt 1 DELETE  &mt LEFT_SHIFT ENTER            &mt RIGHT_SHIFT SPACE  &lt 1 BACKSPACE        &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "num_left";
        };

        NSF {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT            &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE
&kp GRAVE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                 &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &kp MINUS
&kp F1     &kp F2           &kp F3       &kp F4    &kp F5      &kp F6                 &kp F7     &kp F8         &kp F9        &kp F10               &kp F11                &kp F12
                                         &trans    &trans      &trans                 &trans     &trans         &trans
            >;

            label = "NSF_layer";
        };

        Macros {
            bindings = <
&new_macro1  &trans  &trans  &new_macro15  &new_macro  &ext_power EP_ON             &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans        &trans      &ext_power EP_OFF            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans        &trans      &trans                       &trans  &trans  &trans  &trans  &trans  &trans
                             &trans        &trans      &trans                       &trans  &trans  &trans
            >;
        };
    };
};
